<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manual Transmission Driving Game</title>
  <style>
    body { 
      margin: 0; 
      overflow: hidden; 
      font-family: Arial, sans-serif;
    }
    canvas { 
      display: block; 
      width: 100%; 
      height: 100%;
    }
    #ui {
      position: absolute;
      bottom: 20px;
      left: 20px;
      color: white;
      background-color: rgba(0, 0, 0, 0.5);
      padding: 10px;
      border-radius: 5px;
      user-select: none;
    }
    #speedometer {
      font-size: 24px;
      margin-bottom: 10px;
    }
    #gear {
      font-size: 32px;
      font-weight: bold;
      margin-bottom: 10px;
    }
    #rpm-bar {
      width: 200px;
      height: 20px;
      background-color: #333;
      border-radius: 10px;
      overflow: hidden;
      margin-bottom: 10px;
    }
    #rpm-fill {
      height: 100%;
      background-color: green;
      width: 0%;
      transition: width 0.1s, background-color 0.2s;
    }
    #instructions {
      position: absolute;
      top: 20px;
      left: 20px;
      color: white;
      background-color: rgba(0, 0, 0, 0.5);
      padding: 10px;
      border-radius: 5px;
      max-width: 300px;
    }
    #game-over {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: white;
      background-color: rgba(255, 0, 0, 0.7);
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      display: none;
    }
    #restart-btn {
      margin-top: 20px;
      padding: 10px 20px;
      cursor: pointer;
      background-color: white;
      border: none;
      border-radius: 5px;
      font-weight: bold;
    }
    #camera-toggle {
      position: absolute;
      top: 20px;
      right: 20px;
      padding: 10px;
      background-color: rgba(0, 0, 0, 0.5);
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div id="ui">
    <div id="speedometer">0 km/h</div>
    <div id="gear">N</div>
    <div id="rpm-bar"><div id="rpm-fill"></div></div>
    <div id="clutch-status">Clutch: Released</div>
  </div>
  
  <div id="instructions">
    <h3>Controls:</h3>
    <p>W/S - Accelerate/Brake</p>
    <p>A/D - Steer Left/Right</p>
    <p>Z - Clutch</p>
    <p>1,2,3 - Gears</p>
    <p>N - Neutral</p>
    <p>C - Toggle Camera View</p>
    <p>Warning: Downshifting at high speed will blow the engine!</p>
  </div>
  
  <div id="game-over">
    <h2>Engine Blown!</h2>
    <p>You downshifted at too high speed and destroyed the engine.</p>
    <button id="restart-btn">Restart Game</button>
  </div>
  
  <button id="camera-toggle">Toggle Camera View</button>

  <!-- Import Three.js main library -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/0.159.0/three.min.js"></script>
  
  <script>
    // Game variables
    const CAR_SPEED_FACTOR = 0.05;
    const MAX_STEERING = 0.03;
    const STEERING_RESET_FACTOR = 0.95;
    const FRICTION = 0.98;
    const BRAKE_FACTOR = 0.95;
    
    let scene, camera, renderer, car, ground, directionalLight;
    let hoodCamera, thirdPersonCamera, activeCamera;
    let cameraMode = 'third'; // 'hood' or 'third'
    
    // Car physics
    let carVelocity = 0;
    let carRotation = 0;
    let carPosition = new THREE.Vector3(0, 0, 0);
    
    // Transmission variables
    let clutchPressed = false;
    let currentGear = 0; // 0 = neutral, 1-3 = gears
    let rpm = 0;
    const MAX_RPM = 7000;
    const RED_LINE = 6000;
    const IDLE_RPM = 800;
    
    // Audio
    let engineSound;
    let audioContext;
    let gainNode;
    
    // Game state
    let gameOver = false;
    let keysPressed = {};
    
    // Gear ratios (speed multipliers)
    const gearRatios = [0, 1, 1.8, 2.8]; // neutral and 3 gears
    
    // RPM safe zones for each gear
    const maxSafeSpeedForDownshift = [0, 0, 40, 80];
    
    // Initialize the game
    init();
    animate();
    
    function init() {
      // Create scene
      scene = new THREE.Scene();
      scene.background = new THREE.Color(0x87ceeb); // Sky blue
      
      // Create renderer
      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.shadowMap.enabled = true;
      document.body.appendChild(renderer.domElement);
      
      // Set up cameras
      thirdPersonCamera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      thirdPersonCamera.position.set(0, 3, -7);
      thirdPersonCamera.lookAt(0, 0, 0);
      
      hoodCamera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      hoodCamera.position.set(0, 1.5, 0);
      hoodCamera.lookAt(0, 1.5, 10);
      
      activeCamera = thirdPersonCamera;
      
      // Create lights
      const ambientLight = new THREE.AmbientLight(0x404040, 2);
      scene.add(ambientLight);
      
      directionalLight = new THREE.DirectionalLight(0xffffff, 1);
      directionalLight.position.set(10, 20, 10);
      directionalLight.castShadow = true;
      directionalLight.shadow.camera.left = -50;
      directionalLight.shadow.camera.right = 50;
      directionalLight.shadow.camera.top = 50;
      directionalLight.shadow.camera.bottom = -50;
      directionalLight.shadow.camera.near = 0.1;
      directionalLight.shadow.camera.far = 100;
      directionalLight.shadow.mapSize.width = 2048;
      directionalLight.shadow.mapSize.height = 2048;
      scene.add(directionalLight);
      
      // Create ground
      const groundGeometry = new THREE.PlaneGeometry(1000, 1000);
      const groundMaterial = new THREE.MeshStandardMaterial({ 
        color: 0x1a5c1a,
        roughness: 0.8,
      });
      ground = new THREE.Mesh(groundGeometry, groundMaterial);
      ground.rotation.x = -Math.PI / 2;
      ground.receiveShadow = true;
      scene.add(ground);
      
      // Create road
      createRoad();
      
      // Create car (since we can't reliably load external models)
      createCar();
      
      // Try to set up audio (will work if user interacts)
      document.addEventListener('click', initAudio, { once: true });
      
      // Event listeners
      window.addEventListener('resize', onWindowResize);
      window.addEventListener('keydown', handleKeyDown);
      window.addEventListener('keyup', handleKeyUp);
      
      document.getElementById('restart-btn').addEventListener('click', restartGame);
      document.getElementById('camera-toggle').addEventListener('click', toggleCamera);
    }
    
    function createCar() {
      // Create a more detailed car since we can't load the GLB model
      const carGroup = new THREE.Group();
      
      // Car body
      const bodyGeometry = new THREE.BoxGeometry(2, 0.8, 4);
      const bodyMaterial = new THREE.MeshStandardMaterial({ color: 0xff0000 });
      const body = new THREE.Mesh(bodyGeometry, bodyMaterial);
      body.position.y = 0.6;
      body.castShadow = true;
      carGroup.add(body);
      
      // Car roof
      const roofGeometry = new THREE.BoxGeometry(1.8, 0.6, 2);
      const roofMaterial = new THREE.MeshStandardMaterial({ color: 0xdd0000 });
      const roof = new THREE.Mesh(roofGeometry, roofMaterial);
      roof.position.y = 1.3;
      roof.position.z = -0.2;
      roof.castShadow = true;
      carGroup.add(roof);
      
      // Wheels - front left
      const wheelFL = createWheel();
      wheelFL.position.set(-1, 0.3, 1.3);
      carGroup.add(wheelFL);
      
      // Wheels - front right
      const wheelFR = createWheel();
      wheelFR.position.set(1, 0.3, 1.3);
      carGroup.add(wheelFR);
      
      // Wheels - rear left
      const wheelRL = createWheel();
      wheelRL.position.set(-1, 0.3, -1.3);
      carGroup.add(wheelRL);
      
      // Wheels - rear right
      const wheelRR = createWheel();
      wheelRR.position.set(1, 0.3, -1.3);
      carGroup.add(wheelRR);
      
      // Windshield
      const windshieldGeometry = new THREE.BoxGeometry(1.7, 0.8, 0.1);
      const windshieldMaterial = new THREE.MeshStandardMaterial({ color: 0x88ccff, transparent: true, opacity: 0.7 });
      const windshield = new THREE.Mesh(windshieldGeometry, windshieldMaterial);
      windshield.position.set(0, 1.1, 0.9);
      windshield.rotation.x = Math.PI / 6;
      carGroup.add(windshield);
      
      // Rear window
      const rearWindowGeometry = new THREE.BoxGeometry(1.7, 0.8, 0.1);
      const rearWindow = new THREE.Mesh(rearWindowGeometry, windshieldMaterial);
      rearWindow.position.set(0, 1.1, -1.3);
      rearWindow.rotation.x = -Math.PI / 6;
      carGroup.add(rearWindow);
      
      // Headlights
      const headlightGeometry = new THREE.CylinderGeometry(0.2, 0.2, 0.1, 16);
      const headlightMaterial = new THREE.MeshStandardMaterial({ color: 0xffffcc, emissive: 0xffffcc, emissiveIntensity: 0.5 });
      
      const headlightL = new THREE.Mesh(headlightGeometry, headlightMaterial);
      headlightL.position.set(-0.6, 0.6, 2);
      headlightL.rotation.x = Math.PI / 2;
      carGroup.add(headlightL);
      
      const headlightR = new THREE.Mesh(headlightGeometry, headlightMaterial);
      headlightR.position.set(0.6, 0.6, 2);
      headlightR.rotation.x = Math.PI / 2;
      carGroup.add(headlightR);
      
      // Taillights
      const tailLightMaterial = new THREE.MeshStandardMaterial({ color: 0xff0000, emissive: 0xff0000, emissiveIntensity: 0.5 });
      
      const taillightL = new THREE.Mesh(headlightGeometry, tailLightMaterial);
      taillightL.position.set(-0.6, 0.6, -2);
      taillightL.rotation.x = Math.PI / 2;
      carGroup.add(taillightL);
      
      const taillightR = new THREE.Mesh(headlightGeometry, tailLightMaterial);
      taillightR.position.set(0.6, 0.6, -2);
      taillightR.rotation.x = Math.PI / 2;
      carGroup.add(taillightR);
      
      // Set position and add to scene
      carGroup.position.y = 0.2;
      scene.add(carGroup);
      
      // Set as our car object
      car = carGroup;
    }
    
    function createWheel() {
      const wheelGeometry = new THREE.CylinderGeometry(0.3, 0.3, 0.2, 16);
      const wheelMaterial = new THREE.MeshStandardMaterial({ color: 0x222222 });
      const wheel = new THREE.Mesh(wheelGeometry, wheelMaterial);
      wheel.rotation.z = Math.PI / 2;
      wheel.castShadow = true;
      return wheel;
    }
    
    function createRoad() {
      // Create a winding road
      const roadWidth = 10;
      const roadLength = 500;
      
      // Create road segments
      for (let i = 0; i < 10; i++) {
        const segment = new THREE.Mesh(
          new THREE.PlaneGeometry(roadWidth, roadLength / 10),
          new THREE.MeshStandardMaterial({ color: 0x333333 })
        );
        segment.rotation.x = -Math.PI / 2;
        segment.position.z = i * (roadLength / 10) - roadLength / 2;
        segment.position.y = 0.01; // Slightly above ground to prevent z-fighting
        segment.receiveShadow = true;
        scene.add(segment);
        
        // Add road markings
        const centerLine = new THREE.Mesh(
          new THREE.PlaneGeometry(0.3, roadLength / 10),
          new THREE.MeshStandardMaterial({ color: 0xffffff })
        );
        centerLine.rotation.x = -Math.PI / 2;
        centerLine.position.z = segment.position.z;
        centerLine.position.y = 0.02;
        scene.add(centerLine);
      }
      
      // Add some scenery
      for (let i = 0; i < 30; i++) {
        addTree(
          (Math.random() - 0.5) * 100,
          0,
          (Math.random() - 0.5) * 100
        );
      }
    }
    
    function addTree(x, y, z) {
      // Simple tree
      const trunkGeometry = new THREE.CylinderGeometry(0.5, 0.7, 3, 8);
      const trunkMaterial = new THREE.MeshStandardMaterial({ color: 0x8B4513 });
      const trunk = new THREE.Mesh(trunkGeometry, trunkMaterial);
      trunk.position.set(x, y + 1.5, z);
      trunk.castShadow = true;
      scene.add(trunk);
      
      const foliageGeometry = new THREE.ConeGeometry(2, 4, 8);
      const foliageMaterial = new THREE.MeshStandardMaterial({ color: 0x228B22 });
      const foliage = new THREE.Mesh(foliageGeometry, foliageMaterial);
      foliage.position.set(x, y + 5, z);
      foliage.castShadow = true;
      scene.add(foliage);
    }
    
    function initAudio() {
      try {
        // Create audio context
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        // Create oscillator for engine sound
        engineSound = audioContext.createOscillator();
        engineSound.type = 'sawtooth';
        engineSound.frequency.value = 100; // Base frequency
        
        // Create gain node to control volume
        gainNode = audioContext.createGain();
        gainNode.gain.value = 0.1; // Set volume
        
        // Connect the oscillator to the gain node and the gain node to the destination
        engineSound.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        // Start the oscillator
        engineSound.start();
        
        // Update engine sound based on RPM
        updateEngineSound();
      } catch (e) {
        console.log("Audio initialization failed:", e);
      }
    }
    
    function updateEngineSound() {
      if (!engineSound) return;
      
      if (!gameOver) {
        // Map RPM to frequency (higher RPM = higher pitch)
        engineSound.frequency.value = 100 + (rpm / MAX_RPM) * 400;
      }
      requestAnimationFrame(updateEngineSound);
    }
    
    function handleKeyDown(event) {
      if (gameOver && event.key !== 'r') return;
      
      keysPressed[event.key] = true;
      
      switch (event.key.toLowerCase()) {
        case 'z':
          clutchPressed = true;
          document.getElementById('clutch-status').textContent = 'Clutch: Pressed';
          break;
        case '1':
          if (clutchPressed) {
            changeGear(1);
          }
          break;
        case '2':
          if (clutchPressed) {
            changeGear(2);
          }
          break;
        case '3':
          if (clutchPressed) {
            changeGear(3);
          }
          break;
        case 'n':
          if (clutchPressed) {
            changeGear(0); // Neutral
          }
          break;
        case 'c':
          toggleCamera();
          break;
        case 'r':
          if (gameOver) {
            restartGame();
          }
          break;
      }
    }
    
    function handleKeyUp(event) {
      keysPressed[event.key] = false;
      
      if (event.key.toLowerCase() === 'z') {
        clutchPressed = false;
        document.getElementById('clutch-status').textContent = 'Clutch: Released';
        
        // If in gear and not moving, stall the engine
        if (currentGear > 0 && Math.abs(carVelocity) < 0.1) {
          rpm = 0;
          // Would play stall sound here
        }
      }
    }
    
    function changeGear(newGear) {
      // Check if downshifting at too high speed
      if (newGear < currentGear && newGear > 0) {
        const currentSpeed = Math.abs(carVelocity) * 50; // Convert to km/h
        if (currentSpeed > maxSafeSpeedForDownshift[newGear]) {
          blowEngine();
          return;
        }
      }
      
      currentGear = newGear;
      
      // Update gear display
      document.getElementById('gear').textContent = currentGear === 0 ? 'N' : currentGear;
      
      // Adjust RPM based on speed and new gear ratio when shifting
      if (newGear > 0) {
        // Calculate new RPM based on speed and gear ratio
        rpm = (Math.abs(carVelocity) / gearRatios[newGear]) * 7000;
      }
    }
    
    function toggleCamera() {
      if (cameraMode === 'third') {
        cameraMode = 'hood';
        activeCamera = hoodCamera;
      } else {
        cameraMode = 'third';
        activeCamera = thirdPersonCamera;
      }
    }
    
    function blowEngine() {
      gameOver = true;
      rpm = 0;
      carVelocity = 0;
      document.getElementById('rpm-fill').style.width = '0%';
      document.getElementById('rpm-fill').style.backgroundColor = 'red';
      document.getElementById('game-over').style.display = 'block';
      
      // Would play engine blown sound here
    }
    
    function restartGame() {
      gameOver = false;
      carVelocity = 0;
      carRotation = 0;
      carPosition.set(0, 0, 0);
      clutchPressed = false;
      currentGear = 0;
      rpm = IDLE_RPM;
      document.getElementById('game-over').style.display = 'none';
      document.getElementById('gear').textContent = 'N';
      document.getElementById('clutch-status').textContent = 'Clutch: Released';
    }
    
    function onWindowResize() {
      thirdPersonCamera.aspect = window.innerWidth / window.innerHeight;
      thirdPersonCamera.updateProjectionMatrix();
      hoodCamera.aspect = window.innerWidth / window.innerHeight;
      hoodCamera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    }
    
    function updateCar() {
      if (gameOver) return;
      
      const acceleration = keysPressed['w'] ? 1 : keysPressed['s'] ? -1 : 0;
      const steering = keysPressed['a'] ? 1 : keysPressed['d'] ? -1 : 0;
      
      // Handle clutch and gear logic
      if (clutchPressed) {
        // When clutch is pressed, engine can rev freely
        if (acceleration > 0) {
          rpm = Math.min(rpm + 100, MAX_RPM);
        } else {
          rpm = Math.max(rpm - 50, IDLE_RPM);
        }
        
        // No power transfer with clutch pressed
      } else {
        // Clutch released
        if (currentGear === 0) {
          // In neutral, engine can rev but no power transfer
          if (acceleration > 0) {
            rpm = Math.min(rpm + 100, MAX_RPM);
          } else {
            rpm = Math.max(rpm - 50, IDLE_RPM);
          }
        } else {
          // In gear with clutch released - normal driving
          // Power transfer based on rpm and gear
          if (acceleration > 0) {
            carVelocity += (rpm / MAX_RPM) * CAR_SPEED_FACTOR / gearRatios[currentGear];
            rpm = (Math.abs(carVelocity) * gearRatios[currentGear]) * 7000;
          } else if (acceleration < 0) {
            // Braking
            carVelocity *= BRAKE_FACTOR;
            rpm = (Math.abs(carVelocity) * gearRatios[currentGear]) * 7000;
          } else {
            // Coasting
            rpm = (Math.abs(carVelocity) * gearRatios[currentGear]) * 7000;
          }
        }
      }
      
      // Apply natural deceleration (friction)
      carVelocity *= FRICTION;
      
      // Update car position and rotation
      if (Math.abs(carVelocity) > 0.01) {
        carRotation += steering * MAX_STEERING * Math.sign(carVelocity);
      }
      
      // Reset steering when not actively steering
      if (steering === 0) {
        carRotation *= STEERING_RESET_FACTOR;
      }
      
      const moveX = Math.sin(carRotation) * carVelocity;
      const moveZ = Math.cos(carRotation) * carVelocity;
      
      carPosition.x += moveX;
      carPosition.z += moveZ;
      
      // Update car model
      car.position.set(carPosition.x, carPosition.y, carPosition.z);
      car.rotation.y = carRotation;
      
      // Update cameras
      if (cameraMode === 'third') {
        thirdPersonCamera.position.x = carPosition.x - Math.sin(carRotation) * 7;
        thirdPersonCamera.position.z = carPosition.z - Math.cos(carRotation) * 7;
        thirdPersonCamera.position.y = carPosition.y + 3;
        thirdPersonCamera.lookAt(carPosition.x, carPosition.y + 1, carPosition.z);
      } else {
        hoodCamera.position.x = carPosition.x;
        hoodCamera.position.z = carPosition.z;
        hoodCamera.position.y = carPosition.y + 1.5;
        
        // Calculate look target based on car's direction
        const lookX = carPosition.x + Math.sin(carRotation) * 10;
        const lookZ = carPosition.z + Math.cos(carRotation) * 10;
        hoodCamera.lookAt(lookX, carPosition.y + 1.5, lookZ);
      }
      
      // Update UI
      const speed = Math.abs(carVelocity) * 50; // Convert to km/h for display
      document.getElementById('speedometer').textContent = `${Math.round(speed)} km/h`;
      
      // Update RPM display (keep minimum at idle RPM)
      rpm = Math.max(rpm, IDLE_RPM);
      
      // Update RPM bar
      const rpmPercentage = (rpm / MAX_RPM) * 100;
      document.getElementById('rpm-fill').style.width = `${rpmPercentage}%`;
      
      // Change color based on RPM
      if (rpm > RED_LINE) {
        document.getElementById('rpm-fill').style.backgroundColor = 'red';
      } else if (rpm > RED_LINE * 0.8) {
        document.getElementById('rpm-fill').style.backgroundColor = 'orange';
      } else {
        document.getElementById('rpm-fill').style.backgroundColor = 'green';
      }
    }
    
    function animate() {
      requestAnimationFrame(animate);
      
      updateCar();
      
      // Render scene with active camera
      renderer.render(scene, activeCamera);
    }
  </script>
</body>
</html>
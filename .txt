<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>AI PORTAL</title>
  <script src="//code.tidio.co/ospxj0cc7fvuqlosqd0nvsederwszfwd.js" async></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet">
  <style>
    /* Basic Reset */
    body, html {
      margin: 0;
      padding: 0;
      height: 100%;
      overflow: hidden;
      display: flex;
      justify-content: center;
      align-items: center;
      background-color: black;
      font-family: 'Orbitron', sans-serif;
      color: #00ffff;
      text-align: center;
    }

    /* Animated Background */
    .starfield {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -2;
    }

    .grid-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-image: 
        linear-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px),
        linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px);
      background-size: 50px 50px;
      z-index: -1;
      animation: gridPulse 15s infinite linear;
    }

    @keyframes gridPulse {
      0%, 100% { opacity: 0.3; }
      50% { opacity: 0.7; }
    }

    /* Chatbot Styles */
    #beta-chatbox {
      position: fixed;
      bottom: 80px;
      right: 20px;
      width: 380px;
      height: 500px;
      background: rgba(0, 0, 30, 0.95);
      border: 2px solid #00ffff;
      display: none;
      flex-direction: column;
      border-radius: 10px;
      box-shadow: 0 0 20px rgba(0, 255, 255, 0.3);
      z-index: 1000;
      transition: all 0.3s ease;
      resize: both;
      overflow: hidden;
      min-width: 300px;
      min-height: 400px;
    }

    #chat-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px 15px;
      border-bottom: 1px solid #00ffff;
      cursor: move;
    }

    #chat-title {
      margin: 0;
      font-size: 1.2em;
    }

    .chat-controls {
      display: flex;
      gap: 10px;
    }

    .chat-control-btn {
      background: none;
      border: none;
      color: #00ffff;
      cursor: pointer;
      transition: color 0.3s ease;
    }

    .chat-control-btn:hover {
      color: #ff00ff;
    }

    #chat-messages {
      flex-grow: 1;
      padding: 15px;
      overflow-y: auto;
      color: #00ffff;
      border-bottom: 1px solid #00ffff;
      scrollbar-width: thin;
      scrollbar-color: #00ffff rgba(0, 0, 50, 0.9);
    }

    #chat-input-area {
      display: flex;
      padding: 10px;
    }

    #chat-input {
      flex-grow: 1;
      padding: 12px;
      background: rgba(0, 0, 50, 0.9);
      border: 1px solid #00ffff;
      color: #00ffff;
      border-radius: 5px;
      outline: none;
    }

    #send-btn {
      margin-left: 10px;
      background: #00ffff;
      border: none;
      border-radius: 5px;
      width: 40px;
      color: black;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    #send-btn:hover {
      background: #00cccc;
    }

    .chat-message {
      margin: 10px 0;
      padding: 8px;
      border-radius: 5px;
      animation: messageIn 0.3s ease-out;
      word-wrap: break-word;
      max-width: 85%;
    }

    .user-message {
      background: rgba(0, 255, 255, 0.1);
      border: 1px solid rgba(0, 255, 255, 0.3);
      color: #00ffff;
      align-self: flex-end;
      margin-left: auto;
    }

    .ai-message {
      background: rgba(255, 0, 255, 0.1);
      border: 1px solid rgba(255, 0, 255, 0.3);
      color: #ff00ff;
      align-self: flex-start;
    }

    @keyframes messageIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    /* Message Actions */
    .message-actions {
      display: flex;
      justify-content: flex-end;
      gap: 5px;
      margin-top: 5px;
      opacity: 0;
      transition: opacity 0.2s ease;
    }

    .chat-message:hover .message-actions {
      opacity: 1;
    }

    .message-action-btn {
      background: none;
      border: none;
      color: #00ffff;
      cursor: pointer;
      font-size: 0.8em;
      padding: 2px 5px;
    }

    /* Scrollbar styling */
    #chat-messages::-webkit-scrollbar {
      width: 5px;
    }

    #chat-messages::-webkit-scrollbar-thumb {
      background: #00ffff;
      border-radius: 3px;
    }

    /* Button Styles */
    .chat-button {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: #00ffff;
      color: black;
      border: none;
      border-radius: 50%;
      width: 60px;
      height: 60px;
      cursor: pointer;
      transition: background 0.3s ease, transform 0.3s ease;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 1.5em;
      box-shadow: 0 0 10px rgba(0, 255, 255, 0.5);
    }

    .chat-button:hover {
      background: #00cccc;
      transform: scale(1.1);
    }

    /* Typing Indicator */
    .typing-indicator {
      display: flex;
      align-items: center;
      margin: 10px 0;
    }

    .typing-indicator span {
      height: 8px;
      width: 8px;
      margin: 0 2px;
      background-color: #ff00ff;
      border-radius: 50%;
      display: inline-block;
      opacity: 0.4;
    }

    .typing-indicator span:nth-child(1) {
      animation: pulse 1s infinite ease-in-out;
    }
    .typing-indicator span:nth-child(2) {
      animation: pulse 1s infinite ease-in-out 0.2s;
    }
    .typing-indicator span:nth-child(3) {
      animation: pulse 1s infinite ease-in-out 0.4s;
    }

    @keyframes pulse {
      0%, 100% { opacity: 0.4; }
      50% { opacity: 1; }
    }

    /* Quick Suggestions */
    #quick-suggestions {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      padding: 10px;
      border-top: 1px solid rgba(0, 255, 255, 0.3);
    }

    .suggestion {
      background: rgba(0, 255, 255, 0.1);
      border: 1px solid rgba(0, 255, 255, 0.3);
      border-radius: 15px;
      padding: 5px 10px;
      font-size: 0.8em;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .suggestion:hover {
      background: rgba(0, 255, 255, 0.2);
      transform: translateY(-2px);
    }

    /* Notification */
    #notification {
      position: fixed;
      top: 20px;
      right: 20px;
      background: rgba(0, 0, 30, 0.95);
      border: 1px solid #00ffff;
      border-radius: 5px;
      padding: 10px 20px;
      color: #00ffff;
      z-index: 2000;
      display: none;
      animation: notifyIn 0.3s ease-out;
    }

    @keyframes notifyIn {
      from { opacity: 0; transform: translateY(-20px); }
      to { opacity: 1; transform: translateY(0); }
    }
  </style>
</head>
<body>
  <canvas id="starfield" class="starfield"></canvas>
  <div class="grid-overlay"></div>
  
  <div id="notification"></div>

  <div id="beta-chatbox">
    <div id="chat-header">
      <h4 id="chat-title">AI Portal Interface</h4>
      <div class="chat-controls">
        <button class="chat-control-btn" id="minimize-btn"><i class="fas fa-minus"></i></button>
        <button class="chat-control-btn" id="clear-btn"><i class="fas fa-trash-alt"></i></button>
        <button class="chat-control-btn" id="close-btn"><i class="fas fa-times"></i></button>
      </div>
    </div>
    <div id="chat-messages"></div>
    <div id="quick-suggestions">
      <div class="suggestion">Available dimensions</div>
      <div class="suggestion">Site architecture</div>
      <div class="suggestion">Technical info</div>
      <div class="suggestion">Help</div>
    </div>
    <div id="chat-input-area">
      <input type="text" id="chat-input" placeholder="Type your query..." />
      <button id="send-btn"><i class="fas fa-paper-plane"></i></button>
    </div>
  </div>

  <button class="chat-button" id="chat-toggle"><i class="fas fa-robot"></i></button>

  <script>
    // Enhanced Knowledge Base
    const siteKnowledge = {
      pages: {
        main: "Ordinary Mars Builder - Central hub with dimensional access points",
        game: "Enter Dimension - Core terraforming simulation experience",
        videoPlayer: "Watch Videos - Educational and atmospheric content viewer",
        liquidMusic: "Liquid Music - Reactive audio-visual experience",
        ai: "AI Integration - Neural network interface portal"
      },
      structure: [
        "Canvas-based starfield background",
        "Neon grid overlay with warp effects",
        "4 main navigation buttons with pulse animations",
        "Real-time audio-reactive visualizers",
        "Warp distortion transition effects"
      ],
      tech: [
        "WebGL for advanced graphics",
        "Canvas 2D for starfield animation",
        "Web Audio API integration",
        "CSS animations for UI effects",
        "Responsive layout system"
      ],
      commands: {
        "/help": "Show available commands",
        "/clear": "Clear chat history",
        "/time": "Display current system time",
        "/dimensions": "List all accessible dimensions",
        "/tech": "Show technical specifications",
        "/status": "Show system status"
      },
      responses: {
        greeting: [
          "Welcome to the AI Portal. How may I assist you today?",
          "Greetings, traveler. What dimension do you seek?",
          "AI system online. How can I enhance your journey?"
        ],
        farewell: [
          "Disconnecting now. Return soon.",
          "Portal closing. Safe travels across dimensions.",
          "Connection terminated. Progress saved."
        ],
        fallback: [
          "My neural pathways couldn't process that query. Can you rephrase?",
          "That's beyond my current parameters. Try another approach.",
          "I need more data to process that request. Please clarify."
        ]
      }
    };

    // Chat History & State
    let chatHistory = [];
    let isMinimized = false;
    let isDragging = false;
    let dragOffsetX, dragOffsetY;

    // DOM Elements
    const chatToggle = document.getElementById('chat-toggle');
    const chatbox = document.getElementById('beta-chatbox');
    const chatMessages = document.getElementById('chat-messages');
    const chatInput = document.getElementById('chat-input');
    const sendBtn = document.getElementById('send-btn');
    const chatHeader = document.getElementById('chat-header');
    const minimizeBtn = document.getElementById('minimize-btn');
    const clearBtn = document.getElementById('clear-btn');
    const closeBtn = document.getElementById('close-btn');
    const quickSuggestions = document.querySelectorAll('.suggestion');

    // Interactive Starfield Background
    const canvas = document.getElementById('starfield');
    const ctx = canvas.getContext('2d');
    let stars = [];
    let animationFrame;

    function initStarfield() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      stars = [];

      for (let i = 0; i < 200; i++) {
        stars.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          size: Math.random() * 2,
          speed: Math.random() * 0.5 + 0.1
        });
      }
    }

    function animateStarfield() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = "#00ffff";
      
      stars.forEach(star => {
        ctx.beginPath();
        ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
        ctx.fill();
        
        star.y += star.speed;
        if (star.y > canvas.height) {
          star.y = 0;
          star.x = Math.random() * canvas.width;
        }
      });
      
      animationFrame = requestAnimationFrame(animateStarfield);
    }

    // Chat Functionality
    function toggleChat() {
      if (chatbox.style.display === 'none' || chatbox.style.display === '') {
        chatbox.style.display = 'flex';
        if (chatHistory.length === 0) {
          const greeting = getRandomResponse('greeting');
          addMessage('AI', greeting);
          chatHistory.push({sender: 'AI', text: greeting});
        }
      } else {
        chatbox.style.display = 'none';
      }
    }

    function minimizeChat() {
      if (isMinimized) {
        chatbox.style.height = '500px';
        chatMessages.style.display = 'block';
        document.getElementById('quick-suggestions').style.display = 'flex';
        document.getElementById('chat-input-area').style.display = 'flex';
      } else {
        chatbox.style.height = '40px';
        chatMessages.style.display = 'none';
        document.getElementById('quick-suggestions').style.display = 'none';
        document.getElementById('chat-input-area').style.display = 'none';
      }
      isMinimized = !isMinimized;
    }

    function clearChat() {
      chatMessages.innerHTML = '';
      chatHistory = [];
      showNotification('Chat history cleared');
    }

    function addMessage(sender, text) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `chat-message ${sender === 'User' ? 'user-message' : 'ai-message'}`;
      
      const messageContent = document.createElement('div');
      messageContent.innerHTML = `<strong>${sender}:</strong> ${formatMessage(text)}`;
      messageDiv.appendChild(messageContent);
      
      // Add message actions
      const actionsDiv = document.createElement('div');
      actionsDiv.className = 'message-actions';
      
      if (sender === 'AI') {
        const copyBtn = document.createElement('button');
        copyBtn.className = 'message-action-btn';
        copyBtn.innerHTML = '<i class="fas fa-copy"></i> Copy';
        copyBtn.onclick = () => copyToClipboard(text);
        actionsDiv.appendChild(copyBtn);
      }
      
      messageDiv.appendChild(actionsDiv);
      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
      
      // Store in history
      chatHistory.push({sender, text});
    }

    function showTypingIndicator() {
      const indicator = document.createElement('div');
      indicator.className = 'typing-indicator';
      indicator.innerHTML = `<span></span><span></span><span></span>`;
      chatMessages.appendChild(indicator);
      chatMessages.scrollTop = chatMessages.scrollHeight;
      return indicator;
    }

    function removeTypingIndicator(indicator) {
      if (indicator && indicator.parentNode) {
        indicator.parentNode.removeChild(indicator);
      }
    }

    function formatMessage(text) {
      // Add line breaks
      let formatted = text.replace(/\n/g, '<br>');
      
      // Convert URLs to clickable links
      formatted = formatted.replace(
        /(https?:\/\/[^\s]+)/g, 
        '<a href="$1" target="_blank" style="color:#ff00ff;text-decoration:underline;">$1</a>'
      );
      
      return formatted;
    }

    function getRandomResponse(type) {
      const responses = siteKnowledge.responses[type];
      return responses[Math.floor(Math.random() * responses.length)];
    }

    function processCommand(command) {
      const cmd = command.toLowerCase();
      
      if (cmd === '/help') {
        let helpText = "Available commands:\n";
        for (const [cmd, desc] of Object.entries(siteKnowledge.commands)) {
          helpText += `${cmd} - ${desc}\n`;
        }
        return helpText;
      }
      
      if (cmd === '/clear') {
        clearChat();
        return "Chat history cleared.";
      }
      
      if (cmd === '/time') {
        const now = new Date();
        return `Current system time: ${now.toLocaleTimeString()} on ${now.toLocaleDateString()}`;
      }
      
      if (cmd === '/dimensions') {
        let dimensions = "Available dimensions:\n";
        for (const [key, desc] of Object.entries(siteKnowledge.pages)) {
          dimensions += `${key}: ${desc}\n`;
        }
        return dimensions;
      }
      
      if (cmd === '/tech') {
        let techInfo = "Technical specifications:\n";
        siteKnowledge.tech.forEach(item => {
          techInfo += `- ${item}\n`;
        });
        return techInfo;
      }
      
      if (cmd === '/status') {
        return "All systems operational. Neural pathways at optimal capacity.";
      }
      
      return null;
    }

    function getBotResponse(message) {
      // Check if it's a command
      if (message.startsWith('/')) {
        const response = processCommand(message);
        if (response) return response;
      }
      
      const lowerMsg = message.toLowerCase();
      
      // Pattern matching
      if (lowerMsg.includes("hello") || lowerMsg.includes("hi") || lowerMsg.includes("hey")) {
        return getRandomResponse('greeting');
      }
      
      if (lowerMsg.includes("bye") || lowerMsg.includes("goodbye") || lowerMsg.includes("exit")) {
        return getRandomResponse('farewell');
      }
      
      if (lowerMsg.includes("page") || lowerMsg.includes("dimension") || lowerMsg.includes("access")) {
        return `Available dimensions:\n${Object.entries(siteKnowledge.pages).map(([k, v]) => `${k}: ${v}`).join('\n')}`;
      }
      
      if (lowerMsg.includes("structure") || lowerMsg.includes("design") || lowerMsg.includes("layout")) {
        return `Site architecture:\n${siteKnowledge.structure.join('\n')}`;
      }
      
      if (lowerMsg.includes("tech") || lowerMsg.includes("technology") || lowerMsg.includes("how work")) {
        return `Technical stack:\n${siteKnowledge.tech.join('\n')}`;
      }
      
      if (lowerMsg.includes("music") || lowerMsg.includes("liquid") || lowerMsg.includes("audio")) {
        return "Liquid Music uses Web Audio API for real-time audio analysis and WebGL for reactive visual patterns. The experience adapts to the audio frequency spectrum in real-time.";
      }
      
      if (lowerMsg.includes("game") || lowerMsg.includes("terraform") || lowerMsg.includes("simulation")) {
        return "The terraforming simulation allows users to manipulate Martian environments using procedural generation algorithms. Each action affects the ecosystem in real-time.";
      }
      
      if (lowerMsg.includes("contact") || lowerMsg.includes("help") || lowerMsg.includes("support")) {
        return "Use the AI integration portal for direct assistance or quantum comms through the main terminal. For emergencies, use command /status for system diagnostics.";
      }
      
      // Fallback
      return getRandomResponse('fallback') + "\n\nAsk me about:\n- Available dimensions\n- Site structure\n- Technical implementation\n- Feature details";
    }

    async function sendMessage() {
      const message = chatInput.value.trim();
      if (!message) return;
      
      addMessage('User', message);
      chatInput.value = '';
      
      const typingIndicator = showTypingIndicator();
      
      // Simulate processing delay
      const delay = Math.random() * 1000 + 500;
      await new Promise(resolve => setTimeout(resolve, delay));
      
      removeTypingIndicator(typingIndicator);
      const reply = getBotResponse(message);
      addMessage('AI', reply);
    }

    // Utility Functions
    function copyToClipboard(text) {
      navigator.clipboard.writeText(text)
        .then(() => showNotification('Copied to clipboard'))
        .catch(err => showNotification('Failed to copy: ' + err));
    }

    function showNotification(message) {
      const notification = document.getElementById('notification');
      notification.textContent = message;
      notification.style.display = 'block';
      
      setTimeout(() => {
        notification.style.display = 'none';
      }, 3000);
    }

    // Make chatbox draggable
    function initDraggable() {
      chatHeader.addEventListener('mousedown', (e) => {
        isDragging = true;
        const rect = chatbox.getBoundingClientRect();
        dragOffsetX = e.clientX - rect.left;
        dragOffsetY = e.clientY - rect.top;
      });

      document.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        
        const newX = e.clientX - dragOffsetX;
        const newY = e.clientY - dragOffsetY;
        
        // Keep within window bounds
        const maxX = window.innerWidth - chatbox.offsetWidth;
        const maxY = window.innerHeight - chatbox.offsetHeight;
        
        chatbox.style.left = `${Math.max(0, Math.min(newX, maxX))}px`;
        chatbox.style.top = `${Math.max(0, Math.min(newY, maxY))}px`;
        chatbox.style.bottom = 'auto';
        chatbox.style.right = 'auto';
      });

      document.addEventListener('mouseup', () => {
        isDragging = false;
      });
    }

    // Event Listeners
    window.addEventListener('DOMContentLoaded', () => {
      initStarfield();
      animateStarfield();
      initDraggable();
      
      // Add welcome message after a delay
      setTimeout(() => {
        if (chatHistory.length === 0 && chatbox.style.display === 'flex') {
          const greeting = getRandomResponse('greeting');
          addMessage('AI', greeting);
          chatHistory.push({sender: 'AI', text: greeting});
        }
      }, 1000);
    });

    window.addEventListener('resize', () => {
      initStarfield();
    });

    chatToggle.addEventListener('click', toggleChat);
    sendBtn.addEventListener('click', sendMessage);
    chatInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') sendMessage();
    });
    
    minimizeBtn.addEventListener('click', minimizeChat);
    clearBtn.addEventListener('click', clearChat);
    closeBtn.addEventListener('click', toggleChat);
    
    quickSuggestions.forEach(suggestion => {
      suggestion.addEventListener('click', () => {
        chatInput.value = suggestion.textContent;
        sendMessage();
      });
    });
  </script>
</body>
</html>